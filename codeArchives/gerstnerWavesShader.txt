#version 410 core

layout(quads, fractional_even_spacing, ccw) in;

uniform mat4 MVP;
uniform mat4 MV;
uniform mat4 NORMALM;
uniform mat4 SHADOWMVP;

uniform vec2 offset;
uniform vec3 lightPos;
uniform sampler2D normalMap;
uniform sampler2D mirrorTexture;

uniform float time;

in vec3 vpoint_TE[];
in vec2 uv_TE[];

out vec2 uv_F;
out vec2 reflectOffset_F;
out vec3 vpoint_F;
out vec3 normal_MV_F;
out vec3 lightDir_F;
out vec3 viewDir_F;
out vec4 shadowCoord_F;

const float DEGTORAD = 3.14159265359f / 180.0f;

float amps[6] =     float[6](0.005f,        0.004f,         0.0025f,        0.0025f,            0.001f,          0.00f);
float freqs[6] =    float[6](10.0f,         60.0,           80.0,           135.0,              140.0f,         160.0f);
float qs[6] =       float[6](0.5,           1.0,            1.0,            1.5,                0.5,            0.5);
float phis[6] =     float[6](1.0f,          1.2f,           1.4f,           1.5f,               1.8f,           2.0f);
vec2  dirs[6] =     vec2[6](vec2(1.0,0.0),  vec2(1.0, 1.0), vec2(1.0, 0.5), vec2(-0.8, -1.0),   vec2(1.0,-1.0), vec2(-1.0, 1.0));
vec3 sinWave[6] =   vec3[6](vec3(0.0),      vec3(0.0),      vec3(0.0),      vec3(0.0),          vec3(0.0),      vec3(0.0));
float ddx[6] =      float[6](0, 0, 0, 0, 0, 0);
float ddy[6] =      float[6](0, 0, 0, 0, 0, 0);

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2, vec2 v3)
{
    vec2 xlerp1 = mix(v0, v1, gl_TessCoord.x);
    vec2 xlerp2 = mix(v3, v2, gl_TessCoord.x);

    return mix(xlerp1, xlerp2, gl_TessCoord.y);
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2, vec3 v3)
{
    vec3 xlerp1 = mix(v0, v1, gl_TessCoord.x);
    vec3 xlerp2 = mix(v3, v2, gl_TessCoord.x);

    return mix(xlerp1, xlerp2, gl_TessCoord.y);
}

void main()
{
    for(int i = 0; i < 6; i++){
            dirs[i] = normalize(dirs[i]);
        }

    // Interpolate the attributes of the output vertex using the barycentric coordinates
    uv_F = interpolate2D(uv_TE[0], uv_TE[1], uv_TE[2], uv_TE[3]);
    vec3 vpoint_F = interpolate3D(vpoint_TE[0], vpoint_TE[1], vpoint_TE[2], vpoint_TE[3]);

    for(int i = 0; i < 6; i++){

        float waveParam = dot(freqs[i] * dirs[i], uv_F) + (phis[i] * time);
        float qi = qs[i]/(6.0 * freqs[i] * amps[i]);
        float xOffset = qi * amps[i] * dirs[i].x * cos(waveParam);
        float yOffset = qi * amps[i] * dirs[i].y * cos(waveParam);

        //Bring sin in [0,1] for later exponentiation
        float sinTmp = amps[i] * (sin(waveParam));

        //First sin^k, then bring back to [-1, 1] and multiply by amplitude
        sinWave[i] = vec3(xOffset, sinTmp, -yOffset);
        vpoint_F += sinWave[i];
    }

    vec3 waveNormal = vec3(0.0, 1.0, 0.0);
    for(int i = 0; i < 6; i++){
        //Compute derivate of the wave
        float dParam = dot(freqs[i] * dirs[i], uv_F) + (phis[i] * time);
        float fa = freqs[i] * amps[i];
        float s = sin(dParam);
        float c = cos(dParam);
        float qi = qs[i]/(6.0 * freqs[i] * amps[i]);
        waveNormal += vec3(-(dirs[i].x * fa * c), -(qi * fa * s), dirs[i].y * fa * c);
    }

    waveNormal = normalize(waveNormal);

    //Flat normal is the projection of the wave normal onto the mirror surface
    vec3 flatNormal = waveNormal - dot(waveNormal, vec3(0.0, 1.0, 0.0)) * vec3(0.0, 1.0, 0.0);

    //Compute how the flat normal look in camera space
    vec3 eyeNormal = (NORMALM * vec4(flatNormal, 1.0)).xyz;

    //Compute distortion
    reflectOffset_F = normalize(eyeNormal.xy) * length (flatNormal) * 0.3;


    vec4 vpoint_MV = MV * vec4(vpoint_F, 1.0);
    // Lighting
    normal_MV_F = normalize((NORMALM * vec4(waveNormal, 1.0)).xyz);
    lightDir_F = normalize((MV * vec4(lightPos, 1.0)).xyz - vpoint_MV.xyz);
    viewDir_F = -normalize(vpoint_MV.xyz);

    gl_Position = MVP * vec4(vpoint_F, 1.0);
    shadowCoord_F = SHADOWMVP * vec4(vpoint_F, 1.0);
}
